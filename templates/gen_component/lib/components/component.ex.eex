defmodule <%= @app_module_name %>.Components.<%= @component_module_name %> do  
    require Logger  
    use Scenic.Component
    import Scenic.Primitives, only: [{:text, 3}, {:update_opts, 2}]

    @graph Graph.build()
    |> text("", text_align: :center, translate: {100, 200}, id: :text)

    @impl Scenic.Component
    def info( data ), do: """
    #{IO.ANSI.red()}#{__MODULE__} data must be a bitstring
    #{IO.ANSI.yellow()}Received: #{inspect(data)}
    #{IO.ANSI.default_color()}
    """

    @impl Scenic.Component
    def verify( text ) when is_bitstring(text), do: {:ok, text}
    def verify( _ ), do: :invalid_data

    @impl Scenic.Component
    def init( text, opts ) do
        # modify the already built graph
        graph = @graph
        |> Graph.modify(:_root_, &update_opts(&1, styles: opts[:styles]) )
        |> Graph.modify(:text, &text(&1, text) )

        state = %{
        graph: graph,
        text: text
        }

        {:ok, state, push: graph}
    end

    @impl Scenic.Component
    def handle_input(_event, _context, state), do: {:noreply, state}
end
