defmodule <%= @component_module %> do
  require Logger
  use Scenic.Component
  import Scenic.Primitives
  alias Scenic.Graph

  # You can add it to your scene with:
  #
  # graph
  # |> MyApp.Component.#{component_module}.add_to_graph(
  #   "My Component",
  #   translate: {100, 100}
  # )

  @graph Graph.build()
         |> text("", text_align: :center, translate: {100, 200}, id: :text)

  @impl Scenic.Component
  def validate(text) when is_bitstring(text), do: {:ok, text}

  def validate(data) do
    {:error,
     """
     #{IO.ANSI.red()}#{__MODULE__} data must be a bitstring
     #{IO.ANSI.yellow()}Received: #{inspect(data)}
     #{IO.ANSI.default_color()}
     """}
  end

  @impl Scenic.Scene
  def init(scene, text, opts) do
    # modify the already built graph
    graph =
      @graph
      |> Graph.modify(:_root_, &update_opts(&1, styles: opts[:styles]))
      |> Graph.modify(:text, &text(&1, text))

    scene =
      scene
      |> assign(text: text)
      |> push_graph(graph)

    {:ok, scene}
  end

  @impl Scenic.Scene
  def handle_input(_event, _context, scene), do: {:noreply, scene}
end
